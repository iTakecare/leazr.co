===========================================
   DOCUMENTATION API CATALOG LOVABLE 
===========================================

VERSION : 1.0
DATE : Janvier 2025
STATUT : Prêt pour production

===========================================
   SOMMAIRE
===========================================

1. VUE D'ENSEMBLE
2. AUTHENTIFICATION
3. ENDPOINTS DE L'API
4. STRUCTURES DE DONNÉES
5. GESTION DES ERREURS
6. EXEMPLES D'IMPLÉMENTATION
7. BASE DE DONNÉES REQUISE
8. EDGE FUNCTION COMPLÈTE

===========================================
   1. VUE D'ENSEMBLE
===========================================

L'API Catalog permet d'accéder aux données de produits, catégories, marques et autres informations du catalogue d'une entreprise via des endpoints REST sécurisés.

URL DE BASE : https://cifbetjefyfocafanlhv.supabase.co/functions/v1/catalog-api/v1/{companyId}

FORMAT DES RÉPONSES : JSON
MÉTHODES SUPPORTÉES : GET, OPTIONS
PAGINATION : Supportée
FILTRES : Disponibles selon l'endpoint

===========================================
   2. AUTHENTIFICATION
===========================================

AUTHENTIFICATION PAR CLÉ API
- Header requis : x-api-key
- Valeur : Clé API générée dans l'interface d'administration
- Validation : La clé doit être active et associée à l'entreprise

EXEMPLE DE REQUÊTE :
```
GET /catalog-api/v1/{companyId}/products
Headers:
  x-api-key: your_api_key_here
  Content-Type: application/json
```

PERMISSIONS PAR CLÉ API :
- products: Accès aux produits
- categories: Accès aux catégories  
- brands: Accès aux marques
- packs: Accès aux packs de produits
- environmental: Données environnementales
- attributes: Attributs des produits
- specifications: Spécifications techniques
- images: Accès aux images

===========================================
   3. ENDPOINTS DE L'API
===========================================

## 3.1 INFORMATIONS ENTREPRISE
```
GET /catalog-api/v1/{companyId}/company
```

DESCRIPTION : Récupère les informations de base de l'entreprise
PERMISSIONS : Aucune permission spécifique requise

RÉPONSE :
```json
{
  "company": {
    "id": "uuid",
    "name": "Nom Entreprise",
    "slug": "nom-entreprise", 
    "logo_url": "https://...",
    "primary_color": "#3b82f6",
    "secondary_color": "#64748b",
    "accent_color": "#8b5cf6"
  },
  "customizations": {
    "header_enabled": true,
    "header_title": "Notre Catalogue",
    "header_description": "Découvrez nos produits",
    "logo_url": "https://...",
    "primary_color": "#3b82f6"
  }
}
```

## 3.2 PRODUITS
```
GET /catalog-api/v1/{companyId}/products
```

DESCRIPTION : Liste tous les produits actifs
PERMISSIONS : products

PARAMÈTRES DE REQUÊTE :
- category : Filtrer par nom de catégorie
- brand : Filtrer par nom de marque  
- page : Numéro de page (défaut: 1)
- limit : Nombre d'éléments par page (max: 100, défaut: 50)

EXEMPLE :
```
GET /catalog-api/v1/{companyId}/products?category=Ordinateurs&page=1&limit=20
```

RÉPONSE :
```json
{
  "products": [
    {
      "id": "uuid",
      "name": "MacBook Pro M3",
      "description": "Ordinateur portable professionnel",
      "price": 2499.00,
      "monthly_price": 124.95,
      "stock": 15,
      "image_url": "https://...",
      "sku": "MBP-M3-14",
      "active": true,
      "admin_only": false,
      "brands": {
        "name": "Apple",
        "translation": "Apple"
      },
      "categories": {
        "name": "Laptops", 
        "translation": "Ordinateurs portables"
      },
      "product_variant_prices": [
        {
          "id": "uuid",
          "attributes": {"color": "Space Gray", "storage": "512GB"},
          "price": 2499.00,
          "monthly_price": 124.95,
          "stock": 10
        }
      ]
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 20,
    "total": 15
  }
}
```

## 3.3 PRODUIT SPÉCIFIQUE
```
GET /catalog-api/v1/{companyId}/products/{productId}
```

DESCRIPTION : Détails d'un produit spécifique
PERMISSIONS : products

RÉPONSE :
```json
{
  "product": {
    "id": "uuid",
    "name": "MacBook Pro M3",
    "description": "Ordinateur portable professionnel avec puce M3",
    "price": 2499.00,
    "monthly_price": 124.95,
    "stock": 15,
    "image_url": "https://...",
    "sku": "MBP-M3-14",
    "brands": {...},
    "categories": {...},
    "product_variant_prices": [...]
  }
}
```

## 3.4 VARIANTS D'UN PRODUIT
```
GET /catalog-api/v1/{companyId}/products/{productId}/variants
```

DESCRIPTION : Liste les variants de prix/attributs d'un produit
PERMISSIONS : products

RÉPONSE :
```json
{
  "variants": [
    {
      "id": "uuid",
      "product_id": "uuid",
      "attributes": {
        "color": "Space Gray",
        "storage": "512GB",
        "ram": "16GB"
      },
      "price": 2499.00,
      "monthly_price": 124.95,
      "stock": 10
    }
  ]
}
```

## 3.5 PRODUITS ASSOCIÉS
```
GET /catalog-api/v1/{companyId}/products/{productId}/related
```

DESCRIPTION : Produits de la même catégorie
PERMISSIONS : products
LIMITE : 6 produits maximum

RÉPONSE :
```json
{
  "products": [
    {
      "id": "uuid",
      "name": "MacBook Air M2",
      "price": 1299.00,
      "brands": {...},
      "categories": {...}
    }
  ]
}
```

## 3.6 IMPACT CO2 PRODUIT
```
GET /catalog-api/v1/{companyId}/products/{productId}/co2
```

DESCRIPTION : Calcul d'impact environnemental
PERMISSIONS : environmental

RÉPONSE :
```json
{
  "co2_impact": {
    "value": 2.5,
    "unit": "kg CO2eq", 
    "calculation_date": "2025-01-10T10:30:00.000Z"
  }
}
```

## 3.7 CATÉGORIES
```
GET /catalog-api/v1/{companyId}/categories
```

DESCRIPTION : Liste toutes les catégories
PERMISSIONS : categories

RÉPONSE :
```json
{
  "categories": [
    {
      "id": "uuid",
      "name": "Laptops",
      "translation": "Ordinateurs portables",
      "company_id": "uuid",
      "created_at": "2025-01-10T10:30:00.000Z"
    }
  ]
}
```

## 3.8 MARQUES
```
GET /catalog-api/v1/{companyId}/brands  
```

DESCRIPTION : Liste toutes les marques
PERMISSIONS : brands

RÉPONSE :
```json
{
  "brands": [
    {
      "id": "uuid", 
      "name": "Apple",
      "translation": "Apple",
      "website_url": "https://apple.com",
      "company_id": "uuid"
    }
  ]
}
```

## 3.9 PACKS DE PRODUITS
```
GET /catalog-api/v1/{companyId}/packs
```

DESCRIPTION : Liste les packs actifs
PERMISSIONS : packs

RÉPONSE :
```json
{
  "packs": [
    {
      "id": "uuid",
      "name": "Pack Bureau Pro", 
      "description": "Pack complet pour bureau",
      "price": 3999.00,
      "monthly_price": 199.95,
      "is_active": true,
      "company_id": "uuid"
    }
  ]
}
```

## 3.10 PACK SPÉCIFIQUE
```
GET /catalog-api/v1/{companyId}/packs/{packId}
```

DESCRIPTION : Détails d'un pack spécifique
PERMISSIONS : packs

RÉPONSE :
```json
{
  "pack": {
    "id": "uuid",
    "name": "Pack Bureau Pro",
    "description": "Pack complet pour bureau professionnel", 
    "price": 3999.00,
    "monthly_price": 199.95,
    "products": [...],
    "is_active": true
  }
}
```

## 3.11 RECHERCHE
```
GET /catalog-api/v1/{companyId}/search?q=macbook
```

DESCRIPTION : Recherche dans nom et description
PERMISSIONS : products
LIMITE : 20 résultats maximum

PARAMÈTRES :
- q : Terme de recherche (requis)

RÉPONSE :
```json
{
  "products": [
    {
      "id": "uuid",
      "name": "MacBook Pro M3",
      "description": "...",
      "brands": {...},
      "categories": {...}
    }
  ]
}
```

## 3.12 DONNÉES ENVIRONNEMENTALES
```
GET /catalog-api/v1/{companyId}/environmental
```

DESCRIPTION : Métriques environnementales de l'entreprise
PERMISSIONS : environmental

RÉPONSE :
```json
{
  "environmental": {
    "co2_saved": 1250.75,
    "devices_count": 450
  }
}
```

## 3.13 PARAMÈTRES CATALOGUE
```
GET /catalog-api/v1/{companyId}/settings
```

DESCRIPTION : Configuration d'affichage du catalogue
PERMISSIONS : Aucune

RÉPONSE :
```json
{
  "settings": {
    "header_enabled": true,
    "header_title": "Notre Catalogue",
    "header_description": "Découvrez notre gamme",
    "header_background_type": "gradient",
    "header_background_config": {
      "colors": ["#3b82f6", "#8b5cf6"]
    }
  }
}
```

## 3.14 CUSTOMISATIONS
```
GET /catalog-api/v1/{companyId}/customizations
```

DESCRIPTION : Toutes les customisations visuelles
PERMISSIONS : Aucune

RÉPONSE :
```json
{
  "customizations": {
    "company_name": "Mon Entreprise",
    "logo_url": "https://...",
    "primary_color": "#3b82f6",
    "secondary_color": "#64748b", 
    "accent_color": "#8b5cf6",
    "header_enabled": true,
    "header_title": "Notre Catalogue",
    "header_description": "Découvrez nos produits",
    "quote_request_url": "https://...",
    "company_email": "contact@entreprise.com",
    "company_phone": "+33123456789"
  }
}
```

===========================================
   4. STRUCTURES DE DONNÉES
===========================================

## PRODUIT COMPLET
```json
{
  "id": "uuid",
  "name": "string",
  "description": "string",
  "price": "number",
  "monthly_price": "number", 
  "stock": "integer",
  "image_url": "string",
  "sku": "string",
  "active": "boolean",
  "admin_only": "boolean",
  "company_id": "uuid",
  "brand_id": "uuid",
  "category_id": "uuid", 
  "created_at": "timestamp",
  "updated_at": "timestamp",
  "brands": {
    "name": "string",
    "translation": "string"
  },
  "categories": {
    "name": "string", 
    "translation": "string"
  },
  "product_variant_prices": [
    {
      "id": "uuid",
      "attributes": "object",
      "price": "number",
      "monthly_price": "number",
      "stock": "integer"
    }
  ]
}
```

## ENTREPRISE
```json
{
  "id": "uuid",
  "name": "string",
  "slug": "string",
  "logo_url": "string",
  "primary_color": "string",
  "secondary_color": "string", 
  "accent_color": "string",
  "is_active": "boolean"
}
```

## CATÉGORIE
```json
{
  "id": "uuid",
  "name": "string",
  "translation": "string",
  "company_id": "uuid",
  "created_at": "timestamp"
}
```

## MARQUE  
```json
{
  "id": "uuid",
  "name": "string",
  "translation": "string",
  "website_url": "string",
  "company_id": "uuid"
}
```

===========================================
   5. GESTION DES ERREURS
===========================================

## CODES D'ERREUR HTTP

- **400 Bad Request** : Requête malformée
- **401 Unauthorized** : Clé API manquante ou invalide
- **404 Not Found** : Endpoint ou ressource introuvable
- **500 Internal Server Error** : Erreur serveur

## FORMAT DES ERREURS
```json
{
  "error": "Description de l'erreur"
}
```

## EXEMPLES D'ERREURS

### Clé API manquante
```json
{
  "error": "API key required"
}
```

### Clé API invalide
```json
{
  "error": "Invalid API key"
}
```

### Version non supportée
```json
{
  "error": "Unsupported API version"
}
```

### Endpoint introuvable
```json
{
  "error": "Endpoint not found"
}
```

===========================================
   6. EXEMPLES D'IMPLÉMENTATION
===========================================

## JAVASCRIPT/TYPESCRIPT

### Configuration de base
```javascript
const API_BASE_URL = 'https://cifbetjefyfocafanlhv.supabase.co/functions/v1/catalog-api/v1';
const COMPANY_ID = 'votre-company-id';
const API_KEY = 'votre-api-key';

const headers = {
  'Content-Type': 'application/json',
  'x-api-key': API_KEY
};
```

### Récupérer tous les produits
```javascript
async function getProducts(page = 1, limit = 50) {
  const response = await fetch(
    `${API_BASE_URL}/${COMPANY_ID}/products?page=${page}&limit=${limit}`,
    { headers }
  );
  
  if (!response.ok) {
    throw new Error(`Erreur ${response.status}: ${response.statusText}`);
  }
  
  return await response.json();
}

// Utilisation
getProducts().then(data => {
  console.log('Produits:', data.products);
  console.log('Pagination:', data.pagination);
});
```

### Rechercher des produits
```javascript
async function searchProducts(query) {
  const response = await fetch(
    `${API_BASE_URL}/${COMPANY_ID}/search?q=${encodeURIComponent(query)}`,
    { headers }
  );
  return await response.json();
}

// Utilisation
searchProducts('macbook').then(data => {
  console.log('Résultats:', data.products);
});
```

### Récupérer un produit spécifique
```javascript
async function getProduct(productId) {
  const response = await fetch(
    `${API_BASE_URL}/${COMPANY_ID}/products/${productId}`,
    { headers }
  );
  return await response.json();
}
```

### Récupérer les catégories
```javascript
async function getCategories() {
  const response = await fetch(
    `${API_BASE_URL}/${COMPANY_ID}/categories`,
    { headers }
  );
  return await response.json();
}
```

### Gestion des erreurs complète
```javascript
async function apiCall(endpoint) {
  try {
    const response = await fetch(`${API_BASE_URL}/${COMPANY_ID}/${endpoint}`, {
      headers
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || 'Erreur API');
    }
    
    return await response.json();
  } catch (error) {
    console.error('Erreur API:', error.message);
    throw error;
  }
}
```

## REACT HOOK PERSONNALISÉ
```javascript
import { useState, useEffect } from 'react';

export function useCatalogAPI(companyId, apiKey) {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  
  const apiCall = async (endpoint, params = '') => {
    setLoading(true);
    setError(null);
    
    try {
      const url = `${API_BASE_URL}/${companyId}/${endpoint}${params}`;
      const response = await fetch(url, {
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': apiKey
        }
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error);
      }
      
      const data = await response.json();
      return data;
    } catch (err) {
      setError(err.message);
      throw err;
    } finally {
      setLoading(false);
    }
  };
  
  return { apiCall, loading, error };
}

// Utilisation du hook
function ProductList() {
  const { apiCall, loading, error } = useCatalogAPI(COMPANY_ID, API_KEY);
  const [products, setProducts] = useState([]);
  
  useEffect(() => {
    apiCall('products').then(data => {
      setProducts(data.products);
    });
  }, []);
  
  if (loading) return <div>Chargement...</div>;
  if (error) return <div>Erreur: {error}</div>;
  
  return (
    <div>
      {products.map(product => (
        <div key={product.id}>
          <h3>{product.name}</h3>
          <p>{product.description}</p>
          <p>Prix: {product.price}€</p>
        </div>
      ))}
    </div>
  );
}
```

===========================================
   7. BASE DE DONNÉES REQUISE
===========================================

## TABLES PRINCIPALES

### companies
```sql
CREATE TABLE companies (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  slug TEXT UNIQUE,
  logo_url TEXT,
  primary_color TEXT DEFAULT '#3b82f6',
  secondary_color TEXT DEFAULT '#64748b', 
  accent_color TEXT DEFAULT '#8b5cf6',
  co2_saved NUMERIC DEFAULT 0,
  devices_count INTEGER DEFAULT 0,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);
```

### api_keys
```sql
CREATE TABLE api_keys (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  company_id UUID NOT NULL REFERENCES companies(id),
  name TEXT NOT NULL,
  api_key TEXT UNIQUE NOT NULL,
  permissions JSONB DEFAULT '{
    "products": true,
    "categories": true, 
    "brands": true,
    "packs": true,
    "environmental": true
  }'::jsonb,
  is_active BOOLEAN DEFAULT true,
  last_used_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);
```

### categories
```sql
CREATE TABLE categories (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  company_id UUID NOT NULL REFERENCES companies(id),
  name TEXT NOT NULL,
  translation TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);
```

### brands  
```sql
CREATE TABLE brands (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  company_id UUID NOT NULL REFERENCES companies(id),
  name TEXT NOT NULL,
  translation TEXT NOT NULL,
  website_url TEXT,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);
```

### products
```sql
CREATE TABLE products (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  company_id UUID NOT NULL REFERENCES companies(id),
  category_id UUID REFERENCES categories(id),
  brand_id UUID REFERENCES brands(id),
  name TEXT NOT NULL,
  description TEXT,
  price NUMERIC NOT NULL DEFAULT 0,
  monthly_price NUMERIC,
  stock INTEGER DEFAULT 0,
  image_url TEXT,
  sku TEXT,
  active BOOLEAN DEFAULT true,
  admin_only BOOLEAN DEFAULT false,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);
```

### product_variant_prices
```sql
CREATE TABLE product_variant_prices (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  product_id UUID NOT NULL REFERENCES products(id),
  attributes JSONB DEFAULT '{}'::jsonb,
  price NUMERIC NOT NULL,
  monthly_price NUMERIC,
  stock INTEGER DEFAULT 0,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);
```

### product_packs
```sql
CREATE TABLE product_packs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  company_id UUID NOT NULL REFERENCES companies(id),
  name TEXT NOT NULL,
  description TEXT,
  price NUMERIC NOT NULL,
  monthly_price NUMERIC,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);
```

### company_customizations
```sql  
CREATE TABLE company_customizations (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  company_id UUID NOT NULL REFERENCES companies(id),
  company_name TEXT,
  logo_url TEXT,
  primary_color TEXT DEFAULT '#3b82f6',
  secondary_color TEXT DEFAULT '#64748b',
  accent_color TEXT DEFAULT '#8b5cf6',
  header_enabled BOOLEAN DEFAULT true,
  header_title TEXT,
  header_description TEXT,
  header_background_type TEXT DEFAULT 'gradient',
  header_background_config JSONB DEFAULT '{}'::jsonb,
  quote_request_url TEXT,
  company_email TEXT,
  company_phone TEXT,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);
```

## POLITIQUES RLS (ROW LEVEL SECURITY)
```sql
-- Isolation par entreprise pour tous les endpoints
ALTER TABLE products ENABLE ROW LEVEL SECURITY;
ALTER TABLE categories ENABLE ROW LEVEL SECURITY;  
ALTER TABLE brands ENABLE ROW LEVEL SECURITY;
ALTER TABLE api_keys ENABLE ROW LEVEL SECURITY;
ALTER TABLE company_customizations ENABLE ROW LEVEL SECURITY;

-- Exemples de politiques
CREATE POLICY "API access to products" ON products
FOR SELECT USING (true); -- L'edge function utilise des clés service

CREATE POLICY "API access to categories" ON categories  
FOR SELECT USING (true);
```

===========================================
   8. EDGE FUNCTION COMPLÈTE
===========================================

```typescript
// supabase/functions/catalog-api/index.ts
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.39.3'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type, x-api-key',
  'Access-Control-Allow-Methods': 'GET, OPTIONS'
}

interface ApiKeyRecord {
  id: string
  company_id: string
  permissions: any
  is_active: boolean
}

Deno.serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const supabaseAdmin = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    const url = new URL(req.url)
    const pathParts = url.pathname.split('/').filter(Boolean)
    
    // Expected format: /catalog-api/v1/{companyId}/{endpoint}
    if (pathParts.length < 3) {
      return new Response(
        JSON.stringify({ error: 'Invalid API path' }), 
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    const [, version, companyId, endpoint, ...subPaths] = pathParts
    
    if (version !== 'v1') {
      return new Response(
        JSON.stringify({ error: 'Unsupported API version' }), 
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    // Verify API key
    const apiKey = req.headers.get('x-api-key')
    if (!apiKey) {
      return new Response(
        JSON.stringify({ error: 'API key required' }), 
        { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    // Validate API key and get permissions
    const { data: keyData, error: keyError } = await supabaseAdmin
      .from('api_keys')
      .select('id, company_id, permissions, is_active')
      .eq('api_key', apiKey)
      .eq('company_id', companyId)
      .eq('is_active', true)
      .single() as { data: ApiKeyRecord | null, error: any }

    if (keyError || !keyData) {
      return new Response(
        JSON.stringify({ error: 'Invalid API key' }), 
        { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    // Update last_used_at
    await supabaseAdmin
      .from('api_keys')
      .update({ last_used_at: new Date().toISOString() })
      .eq('id', keyData.id)

    // Handle different endpoints
    let data: any
    let error: any

    switch (endpoint) {
      case 'company':
        data = await getCompanyInfo(supabaseAdmin, companyId, keyData.permissions)
        break
      
      case 'products':
        if (subPaths.length > 0) {
          const productId = subPaths[0]
          if (subPaths[1] === 'variants') {
            data = await getProductVariants(supabaseAdmin, companyId, productId, keyData.permissions)
          } else if (subPaths[1] === 'related') {
            data = await getRelatedProducts(supabaseAdmin, companyId, productId, keyData.permissions)
          } else if (subPaths[1] === 'co2') {
            data = await getProductCO2(supabaseAdmin, companyId, productId, keyData.permissions)
          } else {
            data = await getProduct(supabaseAdmin, companyId, productId, keyData.permissions)
          }
        } else {
          data = await getProducts(supabaseAdmin, companyId, keyData.permissions, url.searchParams)
        }
        break

      case 'categories':
        data = await getCategories(supabaseAdmin, companyId, keyData.permissions)
        break

      case 'brands':
        data = await getBrands(supabaseAdmin, companyId, keyData.permissions)
        break

      case 'packs':
        if (subPaths.length > 0) {
          data = await getPack(supabaseAdmin, companyId, subPaths[0], keyData.permissions)
        } else {
          data = await getPacks(supabaseAdmin, companyId, keyData.permissions)
        }
        break

      case 'search':
        data = await searchCatalog(supabaseAdmin, companyId, keyData.permissions, url.searchParams)
        break

      case 'environmental':
        data = await getEnvironmentalData(supabaseAdmin, companyId, keyData.permissions)
        break

      case 'settings':
        data = await getCatalogSettings(supabaseAdmin, companyId, keyData.permissions)
        break

      case 'customizations':
        data = await getCustomizations(supabaseAdmin, companyId, keyData.permissions)
        break

      default:
        return new Response(
          JSON.stringify({ error: 'Endpoint not found' }), 
          { status: 404, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        )
    }

    if (error) {
      console.error('API Error:', error)
      return new Response(
        JSON.stringify({ error: 'Internal server error' }), 
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    return new Response(
      JSON.stringify(data), 
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )

  } catch (error) {
    console.error('Catalog API Error:', error)
    return new Response(
      JSON.stringify({ error: 'Internal server error' }), 
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )
  }
})

// Fonctions des endpoints (voir code complet dans l'edge function)
// ... toutes les fonctions async getProducts, getCategories, etc.
```

## CONFIGURATION SUPABASE
```toml
# supabase/config.toml
project_id = "votre-project-id"

[functions.catalog-api]
verify_jwt = false  # API publique avec authentification par clé
```

===========================================
   NOTES IMPORTANTES
===========================================

1. **Sécurité** : Les clés API doivent être stockées de manière sécurisée
2. **Rate Limiting** : Implémentez un système de limitation de débit si nécessaire  
3. **Cache** : Considérez la mise en cache des réponses pour améliorer les performances
4. **Monitoring** : Surveillez l'utilisation des clés API via last_used_at
5. **Permissions** : Les permissions sont vérifiées mais pas encore implémentées dans tous les endpoints
6. **CORS** : L'API est configurée pour accepter toutes les origines (*)

===========================================
   SUPPORT & MAINTENANCE  
===========================================

- Version actuelle : v1
- Edge Function déployée automatiquement
- Logs disponibles dans le dashboard Supabase
- Monitoring via les métriques Supabase Functions

Documentation générée automatiquement - Version 1.0