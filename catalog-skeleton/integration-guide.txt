# Guide d'intégration - Catalogue iTakecare (Supabase)

Ce guide vous explique comment intégrer le catalogue iTakecare utilisant l'architecture Supabase Edge Functions.

## 🚀 Installation

### 1. Dépendances NPM requises

```bash
npm install @tanstack/react-query framer-motion lucide-react
```

### 2. Dépendances shadcn/ui

Si vous n'avez pas déjà shadcn/ui configuré :

```bash
npx shadcn-ui@latest add button card badge input slider checkbox alert separator label textarea
```

## 📁 Structure des fichiers

Copiez tous les fichiers `.txt` dans votre projet iTakecare :

```
src/
├── catalog/
│   ├── types-catalog.ts          # Types TypeScript
│   ├── api-config.ts            # Configuration Supabase
│   ├── api-service.ts           # Service API Supabase
│   ├── utils-pricing.ts         # Utilitaires prix
│   ├── hooks-products.ts        # Hooks React Query
│   ├── cart-context.tsx         # Contexte panier
│   ├── company-context.tsx      # Contexte entreprise
│   ├── hook-simplified-filter.tsx  # Hook filtres
│   ├── navigation-bar-clean.tsx # Navigation
│   ├── filter-bar-clean.tsx     # Barre de filtres
│   ├── product-grid.tsx         # Grille produits
│   ├── product-card.tsx         # Carte produit
│   ├── catalog-page.tsx         # Page principale
│   └── cart-page.tsx            # Page panier
```

## ⚙️ Configuration

### 1. Configuration API (api-config.ts)

Configurez votre clé API Leazr pour l'intégration Supabase :

```typescript
export const SUPABASE_CONFIG = {
  // Nom de votre Edge Function (déjà déployée sur Supabase)
  EDGE_FUNCTION_NAME: 'catalog-api',
  
  // Endpoints disponibles
  ENDPOINTS: {
    PRODUCTS: 'products',
    CATEGORIES: 'categories',
    COMPANY: 'company',
    CUSTOMIZATIONS: 'customizations',
  },
  
  // Remplacez par votre vraie clé API Leazr
  API_KEY: 'lzr_015eaab80e2b45539d2551e237f22335', // Votre clé API
};
```

### 2. Client Supabase

Assurez-vous que le client Supabase est configuré dans votre projet :

```typescript
// src/integrations/supabase/client.ts doit exister
import { supabase } from '@/integrations/supabase/client';
```

### 3. Wrapper React Query

Dans votre App.tsx ou à la racine :

```typescript
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import CatalogMain from './catalog/catalog-page';

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000, // 5 minutes
      cacheTime: 10 * 60 * 1000, // 10 minutes
    },
  },
});

function App() {
  return (
    <QueryClientProvider client={queryClient}>
      {/* Votre contenu iTakecare existant */}
      
      {/* Catalogue intégré */}
      <CatalogMain companySlug="votre-entreprise-slug" />
    </QueryClientProvider>
  );
}
```

## 🔧 Intégrations possibles

### Option 1 : Page dédiée

```typescript
// pages/CatalogPage.tsx
import CatalogMain from '../catalog/catalog-page';

const CatalogPage = () => {
  return <CatalogMain companySlug="your-company-slug" />;
};
```

### Option 2 : Iframe intégrée

```typescript
// Composant pour intégrer dans une iframe
const CatalogIframe = () => {
  return (
    <div style={{ width: '100%', height: '100vh' }}>
      <CatalogMain companySlug="your-company-slug" />
    </div>
  );
};
```

### Option 3 : Modal/Dialog

```typescript
import { Dialog, DialogContent } from '@/components/ui/dialog';
import CatalogMain from '../catalog/catalog-page';

const CatalogModal = ({ isOpen, onClose }) => {
  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-7xl h-[90vh]">
        <CatalogMain 
          companySlug="your-company-slug"
          onProductSelect={(productId) => {
            // Gérer la sélection de produit
            console.log('Product selected:', productId);
          }}
        />
      </DialogContent>
    </Dialog>
  );
};
```

## 🎨 Personnalisation

### Styles

Le catalogue utilise Tailwind CSS et respecte les tokens de design. Pour personnaliser :

1. **Couleurs** : Modifiez les classes Tailwind dans les composants
2. **Logo entreprise** : Le logo est automatiquement récupéré depuis l'API
3. **Thème** : Les couleurs primaires/secondaires sont appliquées automatiquement

### Comportements

```typescript
// Exemple de personnalisation
<CatalogMain 
  companySlug="your-company-slug"
  onProductSelect={(productId) => {
    // Redirection personnalisée
    window.location.href = `/product/${productId}`;
  }}
/>
```

## 📊 Architecture Supabase - Edge Functions

L'intégration utilise l'architecture suivante :

```
iTakecare → Supabase Edge Functions → Leazr API → Supabase Database
```

### Endpoints disponibles

Tous les appels passent par l'Edge Function `catalog-api` :

#### GET company info
```javascript
// Via Edge Function
supabase.functions.invoke('catalog-api', {
  body: {
    path: 'v1/{companySlug}/company',
    method: 'GET',
    headers: { 'x-api-key': 'your-api-key' }
  }
})
```

#### GET products
```javascript
supabase.functions.invoke('catalog-api', {
  body: {
    path: 'v1/{companySlug}/products?page=1&limit=50',
    method: 'GET',
    headers: { 'x-api-key': 'your-api-key' }
  }
})
```

#### GET categories
```javascript
supabase.functions.invoke('catalog-api', {
  body: {
    path: 'v1/{companySlug}/categories',
    method: 'GET',
    headers: { 'x-api-key': 'your-api-key' }
  }
})
```

### Clé API requise

Vous devez avoir une clé API Leazr valide commençant par `lzr_` pour authentifier les requêtes.

## 🔍 Test et Debug

### 1. Vérification des appels API

Ouvrez les DevTools → Network pour vérifier que les appels API sont corrects.

### 2. État du cache React Query

Installez React Query DevTools pour debug :

```bash
npm install @tanstack/react-query-devtools
```

```typescript
import { ReactQueryDevtools } from '@tanstack/react-query-devtools';

// Dans votre App.tsx
<ReactQueryDevtools initialIsOpen={false} />
```

### 3. Logs personnalisés

Le service API inclut des logs console. Vérifiez la console pour les erreurs.

## 🚨 Points d'attention

1. **Clé API** : Configurez votre vraie clé API Leazr dans `SUPABASE_CONFIG.API_KEY`
2. **Edge Function** : L'Edge Function `catalog-api` doit être déployée sur votre projet Supabase
3. **Authentication** : Pas besoin de CORS, les Edge Functions gèrent cela automatiquement
4. **Cache** : Les données sont mises en cache côté client pour les performances
5. **Responsive** : Tous les composants sont responsive par défaut
6. **Persistence panier** : Le panier est sauvegardé en localStorage
7. **Supabase Client** : Assurez-vous que le client Supabase est bien importé

## 🎯 Prochaines étapes

1. Copiez les fichiers dans votre projet iTakecare
2. Configurez votre vraie clé API Leazr dans `api-config.ts`
3. Vérifiez que le client Supabase est bien configuré
4. Ajoutez le QueryClientProvider si pas déjà fait
5. Testez avec votre slug d'entreprise (ex: `itakecare`)
6. Personnalisez selon vos besoins

## 🆘 Support

En cas de problème :
1. Vérifiez que la clé API Leazr est correcte dans `api-config.ts`
2. Consultez les logs de l'Edge Function Supabase pour débugger
3. Vérifiez que le client Supabase est bien importé
4. Regardez la console navigateur pour les erreurs
5. Testez avec un slug d'entreprise valide comme `itakecare`

L'intégration utilise l'architecture Supabase existante et est conçue pour s'intégrer facilement dans votre projet iTakecare.