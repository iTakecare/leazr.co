// Clean Filter Bar for iTakecare Catalog
// Filtering components without branding

import React from 'react';
import { Badge } from '@/components/ui/badge';
import { Slider } from '@/components/ui/slider';
import { Checkbox } from '@/components/ui/checkbox';
import { Button } from '@/components/ui/button';
import { X, SlidersHorizontal } from 'lucide-react';
import { Category, Brand } from './types-catalog';

interface FilterBarProps {
  // Categories
  categories: Category[];
  selectedCategory: string | null;
  onCategoryChange: (category: string | null) => void;
  
  // Brands
  brands: Brand[];
  selectedBrands: string[];
  onBrandsChange: (brands: string[]) => void;
  
  // Price Range
  priceRange: [number, number];
  onPriceRangeChange: (range: [number, number]) => void;
  minPrice: number;
  maxPrice: number;
  
  // General
  hasActiveFilters: boolean;
  onResetFilters: () => void;
  
  // Mobile
  isMobile?: boolean;
  isOpen?: boolean;
  onClose?: () => void;
}

const FilterBar: React.FC<FilterBarProps> = ({
  categories,
  selectedCategory,
  onCategoryChange,
  brands,
  selectedBrands,
  onBrandsChange,
  priceRange,
  onPriceRangeChange,
  minPrice,
  maxPrice,
  hasActiveFilters,
  onResetFilters,
  isMobile = false,
  isOpen = true,
  onClose,
}) => {
  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('fr-FR', {
      style: 'currency',
      currency: 'EUR',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(price);
  };

  const toggleBrand = (brandName: string) => {
    const newBrands = selectedBrands.includes(brandName)
      ? selectedBrands.filter(b => b !== brandName)
      : [...selectedBrands, brandName];
    onBrandsChange(newBrands);
  };

  if (isMobile && !isOpen) return null;

  return (
    <div className={`bg-white border-r border-gray-200 ${isMobile ? 'fixed inset-0 z-50 overflow-y-auto' : 'w-80 h-fit'}`}>
      <div className="p-6 space-y-6">
        {/* Mobile Header */}
        {isMobile && (
          <div className="flex items-center justify-between pb-4 border-b border-gray-200">
            <div className="flex items-center space-x-2">
              <SlidersHorizontal className="h-5 w-5" />
              <h2 className="text-lg font-semibold">Filtres</h2>
            </div>
            <Button variant="ghost" size="sm" onClick={onClose}>
              <X className="h-4 w-4" />
            </Button>
          </div>
        )}

        {/* Reset Filters */}
        {hasActiveFilters && (
          <Button
            variant="outline"
            size="sm"
            onClick={onResetFilters}
            className="w-full"
          >
            Effacer tous les filtres
          </Button>
        )}

        {/* Categories */}
        {categories.length > 0 && (
          <div className="space-y-3">
            <h3 className="font-medium text-sm text-gray-900">Cat√©gories</h3>
            <div className="flex flex-wrap gap-2">
              <Badge
                variant={selectedCategory === null ? "default" : "outline"}
                className="cursor-pointer transition-all hover:scale-105"
                onClick={() => onCategoryChange(null)}
              >
                Toutes
              </Badge>
              {categories.map((category) => (
                <Badge
                  key={category.name}
                  variant={selectedCategory === category.name ? "default" : "outline"}
                  className="cursor-pointer transition-all hover:scale-105"
                  onClick={() => onCategoryChange(category.name)}
                >
                  {category.translation}
                  <span className="ml-1 text-xs opacity-70">({category.count})</span>
                </Badge>
              ))}
            </div>
          </div>
        )}

        {/* Price Range */}
        {maxPrice > minPrice && (
          <div className="space-y-3">
            <h3 className="font-medium text-sm text-gray-900">Prix mensuel</h3>
            <div className="px-2">
              <Slider
                value={priceRange}
                onValueChange={onPriceRangeChange}
                min={minPrice}
                max={maxPrice}
                step={10}
                className="w-full"
              />
              <div className="flex justify-between mt-2 text-xs text-gray-500">
                <span>{formatPrice(priceRange[0])}</span>
                <span>{formatPrice(priceRange[1])}</span>
              </div>
              <div className="flex justify-between mt-1 text-xs text-gray-400">
                <span>Min: {formatPrice(minPrice)}</span>
                <span>Max: {formatPrice(maxPrice)}</span>
              </div>
            </div>
          </div>
        )}

        {/* Brands */}
        {brands.length > 0 && (
          <div className="space-y-3">
            <h3 className="font-medium text-sm text-gray-900">Marques</h3>
            
            {/* Selected Brands */}
            {selectedBrands.length > 0 && (
              <div className="flex flex-wrap gap-2 mb-3">
                {selectedBrands.map((brand) => (
                  <Badge
                    key={brand}
                    variant="default"
                    className="cursor-pointer"
                    onClick={() => toggleBrand(brand)}
                  >
                    {brand}
                    <X className="ml-1 h-3 w-3" />
                  </Badge>
                ))}
              </div>
            )}

            {/* Brand List */}
            <div className="max-h-48 overflow-y-auto space-y-2">
              {brands.map((brand) => (
                <div key={brand.name} className="flex items-center space-x-2">
                  <Checkbox
                    id={brand.name}
                    checked={selectedBrands.includes(brand.name)}
                    onCheckedChange={() => toggleBrand(brand.name)}
                  />
                  <label
                    htmlFor={brand.name}
                    className="text-sm text-gray-700 cursor-pointer flex-1"
                  >
                    {brand.name}
                    <span className="text-xs text-gray-400 ml-1">({brand.count})</span>
                  </label>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Mobile Apply Button */}
        {isMobile && (
          <div className="pt-4 border-t border-gray-200">
            <Button
              onClick={onClose}
              className="w-full"
            >
              Appliquer les filtres
            </Button>
          </div>
        )}
      </div>
    </div>
  );
};

export default FilterBar;