// API Service for iTakecare Catalog - Supabase Integration
// Handles all API calls to Supabase Edge Functions

import { supabase } from '@/integrations/supabase/client';
import { buildEdgeFunctionCall, buildEdgeFunctionPost, SUPABASE_CONFIG } from './api-config';
import { Product, CatalogResponse, Company, ApiError } from './types-catalog';

class ApiService {
  // Handle API errors
  private handleApiError(error: any): ApiError {
    if (error instanceof Error) {
      return {
        message: error.message,
        code: 'NETWORK_ERROR'
      };
    }
    return {
      message: 'Une erreur inattendue est survenue',
      code: 'UNKNOWN_ERROR'
    };
  }

  // Generic Supabase Edge Function call method
  private async edgeFunctionCall<T>(
    companySlug: string,
    endpoint: string,
    params?: Record<string, string>
  ): Promise<T> {
    try {
      const { functionName, body } = buildEdgeFunctionCall(companySlug, endpoint, params);
      
      const { data, error } = await supabase.functions.invoke(functionName, body);
      
      if (error) {
        throw new Error(`Edge Function error: ${error.message}`);
      }
      
      return data;
    } catch (error) {
      throw this.handleApiError(error);
    }
  }

  // Generic POST method for Supabase Edge Function
  private async edgeFunctionPost<T>(
    companySlug: string,
    endpoint: string,
    postData: any
  ): Promise<T> {
    try {
      const { functionName, body } = buildEdgeFunctionPost(companySlug, endpoint, postData);
      
      const { data, error } = await supabase.functions.invoke(functionName, body);
      
      if (error) {
        throw new Error(`Edge Function error: ${error.message}`);
      }
      
      return data;
    } catch (error) {
      throw this.handleApiError(error);
    }
  }

  // Get company information by slug
  async getCompanyBySlug(slug: string): Promise<Company | null> {
    try {
      const data = await this.edgeFunctionCall<Company>(slug, SUPABASE_CONFIG.ENDPOINTS.COMPANY);
      return data;
    } catch (error) {
      console.error('Error fetching company:', error);
      return null;
    }
  }

  // Get public catalog with filters
  async getPublicCatalog(
    companySlug: string,
    filters?: {
      search?: string;
      category?: string;
      brands?: string[];
      priceRange?: [number, number];
      page?: number;
      limit?: number;
    }
  ): Promise<CatalogResponse> {
    const params: Record<string, string> = {};
    
    if (filters) {
      if (filters.search) params.search = filters.search;
      if (filters.category) params.category = filters.category;
      if (filters.brands?.length) params.brands = filters.brands.join(',');
      if (filters.priceRange) {
        params.minPrice = filters.priceRange[0].toString();
        params.maxPrice = filters.priceRange[1].toString();
      }
      if (filters.page) params.page = filters.page.toString();
      if (filters.limit) params.limit = filters.limit.toString();
    }
    
    return await this.edgeFunctionCall<CatalogResponse>(
      companySlug,
      SUPABASE_CONFIG.ENDPOINTS.PRODUCTS,
      params
    );
  }

  // Get product by slug
  async getProductBySlug(companySlug: string, productSlug: string): Promise<Product | null> {
    try {
      const data = await this.edgeFunctionCall<Product>(
        companySlug,
        `${SUPABASE_CONFIG.ENDPOINTS.PRODUCTS}/${productSlug}`
      );
      return data;
    } catch (error) {
      console.error('Error fetching product:', error);
      return null;
    }
  }

  // Get product by ID
  async getProductById(companySlug: string, productId: string): Promise<Product | null> {
    try {
      const data = await this.edgeFunctionCall<Product>(
        companySlug,
        `${SUPABASE_CONFIG.ENDPOINTS.PRODUCTS}/${productId}`
      );
      return data;
    } catch (error) {
      console.error('Error fetching product by ID:', error);
      return null;
    }
  }

  // Get categories for company
  async getCategories(companySlug: string): Promise<{ categories: any[] }> {
    try {
      const data = await this.edgeFunctionCall<{ categories: any[] }>(
        companySlug,
        SUPABASE_CONFIG.ENDPOINTS.CATEGORIES
      );
      return data;
    } catch (error) {
      console.error('Error fetching categories:', error);
      return { categories: [] };
    }
  }

  // Get customizations for company
  async getCustomizations(companySlug: string): Promise<any> {
    try {
      const data = await this.edgeFunctionCall<any>(
        companySlug,
        SUPABASE_CONFIG.ENDPOINTS.CUSTOMIZATIONS
      );
      return data;
    } catch (error) {
      console.error('Error fetching customizations:', error);
      return null;
    }
  }

  // Submit cart for quote/order
  async submitCart(
    companySlug: string,
    cartData: {
      items: any[];
      customerInfo: {
        email: string;
        name: string;
        company?: string;
        phone?: string;
      };
      type: 'quote' | 'order';
    }
  ): Promise<{ success: boolean; id?: string; message?: string }> {
    try {
      const data = await this.edgeFunctionPost<{ success: boolean; id?: string; message?: string }>(
        companySlug,
        'cart/submit',
        cartData
      );
      return data;
    } catch (error) {
      console.error('Error submitting cart:', error);
      return { 
        success: false, 
        message: error instanceof Error ? error.message : 'Erreur lors de la soumission' 
      };
    }
  }
}

// Export singleton instance
export const apiService = new ApiService();