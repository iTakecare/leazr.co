import { supabase } from "@/integrations/supabase/client";
import { CustomPdfTemplate, CreateCustomPdfTemplateData } from "@/types/customPdfTemplate";

// Service de gestion des templates PDF personnalis√©s
const customPdfTemplateService = {
  // R√©cup√©rer un template par ID
  async getTemplate(templateId: string): Promise<CustomPdfTemplate | null> {
    const { data, error } = await supabase
      .from('custom_pdf_templates')
      .select('*, clients(name)')
      .eq('id', templateId)
      .maybeSingle();

    if (error) {
      console.error('Error fetching template:', error);
      throw error;
    }

    return data;
  },

  // R√©cup√©rer tous les templates d'une entreprise
  async getTemplatesByCompany(): Promise<CustomPdfTemplate[]> {
    const { data, error } = await supabase
      .from('custom_pdf_templates')
      .select('*, clients(name)')
      .order('created_at', { ascending: false });

    if (error) {
      console.error('Error fetching company templates:', error);
      throw error;
    }

    return data || [];
  },

  // R√©cup√©rer le template actif pour un client
  async getActiveTemplateByClient(clientId?: string): Promise<CustomPdfTemplate | null> {
    if (!clientId) {
      // Si pas de clientId, retourner le premier template actif de l'entreprise
      const { data, error } = await supabase
        .from('custom_pdf_templates')
        .select('*, clients(name)')
        .eq('is_active', true)
        .limit(1)
        .maybeSingle();

      if (error) {
        console.error('Error fetching active template:', error);
        throw error;
      }

      return data;
    }

    const { data, error } = await supabase
      .from('custom_pdf_templates')
      .select('*, clients(name)')
      .eq('client_id', clientId)
      .eq('is_active', true)
      .maybeSingle();

    if (error) {
      console.error('Error fetching active template:', error);
      throw error;
    }

    return data;
  },

  // Cr√©er un nouveau template
  async createTemplate(templateData: CreateCustomPdfTemplateData): Promise<CustomPdfTemplate> {
    console.log('üöÄ D√©but de la cr√©ation du template:', templateData.name);
    
    try {
      // Validation des donn√©es
      await this.validateTemplateData(templateData);
      
      // R√©cup√©rer le company_id
      const companyId = await this.getCurrentUserCompanyId();
      console.log('‚úÖ Company ID pour le template:', companyId);
      
      // D'abord d√©sactiver tous les templates existants pour ce client
      console.log('üîÑ D√©sactivation des templates existants pour le client:', templateData.client_id);
      await this.deactivateClientTemplates(templateData.client_id);

      // Pr√©parer les donn√©es d'insertion
      const insertData = {
        ...templateData,
        company_id: companyId,
        is_active: templateData.is_active ?? true
      };
      
      console.log('üìù Donn√©es √† ins√©rer:', {
        name: insertData.name,
        client_id: insertData.client_id,
        company_id: insertData.company_id,
        is_active: insertData.is_active,
        field_mappings_size: JSON.stringify(insertData.field_mappings || {}).length
      });

      const { data, error } = await supabase
        .from('custom_pdf_templates')
        .insert(insertData)
        .select()
        .single();

      if (error) {
        console.error('‚ùå Erreur lors de l\'insertion en base:', error);
        
        // Messages d'erreur plus sp√©cifiques
        if (error.code === '23505') {
          throw new Error('Un template avec ce nom existe d√©j√† pour ce client');
        }
        if (error.code === '23503') {
          throw new Error('R√©f√©rence invalide - v√©rifiez les donn√©es du client');
        }
        if (error.code === '42501') {
          throw new Error('Permissions insuffisantes pour cr√©er un template');
        }
        
        throw new Error(`Erreur de base de donn√©es: ${error.message}`);
      }

      if (!data) {
        console.error('‚ùå Aucune donn√©e retourn√©e apr√®s insertion');
        throw new Error('Template cr√©√© mais impossible de r√©cup√©rer les donn√©es');
      }

      console.log('‚úÖ Template cr√©√© avec succ√®s - ID:', data.id);
      return data;
      
    } catch (error) {
      console.error('üí• Erreur lors de la cr√©ation du template:', error);
      throw error;
    }
  },

  // Mettre √† jour un template
  async updateTemplate(templateId: string, updates: Partial<CustomPdfTemplate>): Promise<CustomPdfTemplate> {
    const { data, error } = await supabase
      .from('custom_pdf_templates')
      .update(updates)
      .eq('id', templateId)
      .select()
      .single();

    if (error) {
      console.error('Error updating template:', error);
      throw error;
    }

    return data;
  },

  // Supprimer un template
  async deleteTemplate(templateId: string): Promise<void> {
    const { error } = await supabase
      .from('custom_pdf_templates')
      .delete()
      .eq('id', templateId);

    if (error) {
      console.error('Error deleting template:', error);
      throw error;
    }
  },

  // D√©sactiver tous les templates d'un client
  async deactivateClientTemplates(clientId: string): Promise<void> {
    const { error } = await supabase
      .from('custom_pdf_templates')
      .update({ is_active: false })
      .eq('client_id', clientId);

    if (error) {
      console.error('Error deactivating templates:', error);
      throw error;
    }
  },

  // Activer un template sp√©cifique
  async activateTemplate(templateId: string, clientId: string): Promise<void> {
    // D'abord d√©sactiver tous les autres templates du client
    await this.deactivateClientTemplates(clientId);

    // Puis activer le template s√©lectionn√©
    const { error } = await supabase
      .from('custom_pdf_templates')
      .update({ is_active: true })
      .eq('id', templateId);

    if (error) {
      console.error('Error activating template:', error);
      throw error;
    }
  },

  // Fonction utilitaire pour r√©cup√©rer l'ID de l'entreprise courante
  async getCurrentUserCompanyId(): Promise<string> {
    console.log('üîç R√©cup√©ration du company_id de l\'utilisateur actuel...');
    
    try {
      // V√©rifier d'abord si l'utilisateur est connect√©
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError) {
        console.error('‚ùå Erreur d\'authentification:', authError);
        throw new Error('Utilisateur non authentifi√©');
      }
      
      if (!user) {
        console.error('‚ùå Aucun utilisateur connect√©');
        throw new Error('Aucun utilisateur connect√©');
      }
      
      console.log('‚úÖ Utilisateur connect√©:', user.email);
      
      // R√©cup√©rer le profil de l'utilisateur
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('id, company_id, role, first_name, last_name')
        .eq('id', user.id)
        .single();
      
      if (profileError) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration du profil:', profileError);
        throw new Error('Impossible de r√©cup√©rer le profil utilisateur');
      }
      
      if (!profile) {
        console.error('‚ùå Aucun profil trouv√© pour l\'utilisateur');
        throw new Error('Profil utilisateur non trouv√©');
      }
      
      console.log('üë§ Profil utilisateur:', {
        id: profile.id,
        company_id: profile.company_id,
        role: profile.role,
        name: `${profile.first_name} ${profile.last_name}`
      });
      
      if (!profile.company_id) {
        console.error('‚ùå Aucun company_id dans le profil');
        throw new Error('L\'utilisateur n\'est associ√© √† aucune entreprise');
      }
      
      console.log('‚úÖ Company ID r√©cup√©r√©:', profile.company_id);
      return profile.company_id;
      
    } catch (error) {
      console.error('üí• Erreur dans getCurrentUserCompanyId:', error);
      throw error;
    }
  },

  // Validation des donn√©es avant sauvegarde
  async validateTemplateData(templateData: CreateCustomPdfTemplateData): Promise<void> {
    console.log('üîç Validation des donn√©es du template...');
    
    if (!templateData.name || templateData.name.trim().length === 0) {
      throw new Error('Le nom du template est obligatoire');
    }
    
    if (!templateData.client_id) {
      throw new Error('L\'ID du client est obligatoire');
    }
    
    if (!templateData.original_pdf_url || templateData.original_pdf_url.trim().length === 0) {
      throw new Error('L\'URL du PDF original est obligatoire');
    }
    
    // V√©rifier que le client existe et appartient √† la m√™me entreprise
    const companyId = await this.getCurrentUserCompanyId();
    const { data: client, error: clientError } = await supabase
      .from('clients')
      .select('id, name, company_id')
      .eq('id', templateData.client_id)
      .eq('company_id', companyId)
      .single();
    
    if (clientError || !client) {
      console.error('‚ùå Client non trouv√© ou appartient √† une autre entreprise:', clientError);
      throw new Error('Client non trouv√© ou non autoris√©');
    }
    
    console.log('‚úÖ Validation r√©ussie - Client:', client.name);
  }
};

// Export des fonctions individuelles 
export const getTemplate = customPdfTemplateService.getTemplate.bind(customPdfTemplateService);
export const getTemplatesByCompany = customPdfTemplateService.getTemplatesByCompany.bind(customPdfTemplateService);
export const getActiveTemplateByClient = customPdfTemplateService.getActiveTemplateByClient.bind(customPdfTemplateService);
export const createTemplate = customPdfTemplateService.createTemplate.bind(customPdfTemplateService);
export const updateTemplate = customPdfTemplateService.updateTemplate.bind(customPdfTemplateService);
export const deleteTemplate = customPdfTemplateService.deleteTemplate.bind(customPdfTemplateService);
export const deactivateClientTemplates = customPdfTemplateService.deactivateClientTemplates.bind(customPdfTemplateService);
export const activateTemplate = customPdfTemplateService.activateTemplate.bind(customPdfTemplateService);

// Export par d√©faut
export default customPdfTemplateService;