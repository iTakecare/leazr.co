
import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Loader2, Wand2, AlertCircle } from "lucide-react";
import { toast } from "sonner";
import { supabase } from "@/integrations/supabase/client";
import { Product } from "@/types/catalog";
import { Alert, AlertDescription } from "@/components/ui/alert";

interface SpecificationGeneratorProps {
  product: Product;
  onSpecificationsGenerated: (specifications: Record<string, string>) => void;
}

const SpecificationGenerator: React.FC<SpecificationGeneratorProps> = ({
  product,
  onSpecificationsGenerated
}) => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [lastGenerated, setLastGenerated] = useState<Record<string, string> | null>(null);

  const handleGenerateSpecifications = async () => {
    setIsGenerating(true);

    try {
      console.log("ü§ñ Generating specifications for product:", product.name);

      // Prepare variants data for the AI
      const variants = product.variant_combination_prices?.map(variant => ({
        attributes: variant.attributes || {},
        price: variant.price,
        monthly_price: variant.monthly_price
      })) || [];

      const { data, error } = await supabase.functions.invoke('generate-product-description', {
        body: {
          productName: product.name,
          brand: product.brand,
          category: product.category,
          includeSpecifications: true,
          variants: variants,
          existingSpecifications: product.specifications || {}
        }
      });

      if (error) {
        console.error("Edge function error:", error);
        throw new Error(error.message || "Erreur lors de la g√©n√©ration");
      }

      if (!data?.success || !data?.specifications) {
        throw new Error("Aucune sp√©cification g√©n√©r√©e");
      }

      console.log("‚úÖ Specifications generated:", data.specifications);
      
      setLastGenerated(data.specifications);
      onSpecificationsGenerated(data.specifications);
      
      toast.success("Sp√©cifications techniques g√©n√©r√©es avec succ√®s");

    } catch (error) {
      console.error("Error generating specifications:", error);
      toast.error(`Erreur lors de la g√©n√©ration: ${error.message}`);
    } finally {
      setIsGenerating(false);
    }
  };

  const hasVariants = product.variant_combination_prices && product.variant_combination_prices.length > 0;
  const existingSpecs = product.specifications && Object.keys(product.specifications).length > 0;

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Wand2 className="h-5 w-5" />
          G√©n√©rateur de sp√©cifications IA
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="text-sm text-muted-foreground">
          <p>
            G√©n√©rez automatiquement des sp√©cifications techniques adapt√©es au mat√©riel reconditionn√© 
            et au mod√®le de leasing.
          </p>
        </div>

        {hasVariants && (
          <Alert>
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>
              L'IA utilisera les variantes configur√©es ({product.variant_combination_prices?.length} configurations) 
              pour g√©n√©rer des sp√©cifications g√©n√©riques appropri√©es.
            </AlertDescription>
          </Alert>
        )}

        {existingSpecs && (
          <Alert>
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>
              Les sp√©cifications existantes seront enrichies et am√©lior√©es par l'IA.
            </AlertDescription>
          </Alert>
        )}

        <div className="flex gap-2">
          <Button 
            onClick={handleGenerateSpecifications}
            disabled={isGenerating}
            className="flex-1"
          >
            {isGenerating ? (
              <>
                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                G√©n√©ration en cours...
              </>
            ) : (
              <>
                <Wand2 className="h-4 w-4 mr-2" />
                {existingSpecs ? 'R√©g√©n√©rer' : 'G√©n√©rer'} les sp√©cifications
              </>
            )}
          </Button>
        </div>

        {lastGenerated && (
          <div className="mt-4 p-3 bg-green-50 border border-green-200 rounded-md">
            <div className="text-sm font-medium text-green-800 mb-2">
              ‚úÖ Derni√®res sp√©cifications g√©n√©r√©es :
            </div>
            <div className="text-xs text-green-700 space-y-1">
              {Object.entries(lastGenerated).map(([key, value]) => (
                <div key={key}>
                  <strong>{key}:</strong> {value}
                </div>
              ))}
            </div>
          </div>
        )}

        <div className="text-xs text-muted-foreground mt-4 p-3 bg-blue-50 border border-blue-200 rounded-md">
          <div className="font-medium text-blue-800 mb-1">üí° Conseil :</div>
          <p className="text-blue-700">
            L'IA √©vite automatiquement les d√©tails techniques trop pr√©cis (CPU exact, RAM exacte) 
            pour rester coh√©rent avec votre mod√®le de variantes. Les sp√©cifications g√©n√©r√©es 
            mettent l'accent sur le reconditionnement, la garantie et les b√©n√©fices du leasing.
          </p>
        </div>
      </CardContent>
    </Card>
  );
};

export default SpecificationGenerator;
