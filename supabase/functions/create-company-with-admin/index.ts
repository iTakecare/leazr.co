
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.39.3';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface CreateCompanyRequest {
  companyName: string;
  adminEmail: string;
  adminPassword: string;
  adminFirstName: string;
  adminLastName: string;
  plan: string;
  selectedModules: string[];
}

// Fonction pour g√©n√©rer un UUID simple
function generateUUID(): string {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0;
    const v = c === 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

const handler = async (req: Request): Promise<Response> => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  let companyId: string | null = null;
  let userId: string | null = null;

  try {
    const supabaseAdmin = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '',
      {
        auth: {
          autoRefreshToken: false,
          persistSession: false
        }
      }
    );

    const {
      companyName,
      adminEmail,
      adminPassword,
      adminFirstName,
      adminLastName,
      plan,
      selectedModules
    }: CreateCompanyRequest = await req.json();

    console.log('üöÄ D√©but cr√©ation entreprise:', { companyName, plan, modulesCount: selectedModules?.length || 0 });

    // G√©n√©rer un email unique avec UUID pour √©viter tout conflit
    const uniqueId = generateUUID().substring(0, 8);
    const finalAdminEmail = adminEmail || `admin-${uniqueId}@temp.leazr.co`;

    console.log('üìß Email admin g√©n√©r√©:', finalAdminEmail);

    // √âTAPE 1: Cr√©er l'entreprise
    console.log('üè¢ Cr√©ation de l\'entreprise...');
    try {
      const { data: company, error: companyError } = await supabaseAdmin
        .from('companies')
        .insert({
          name: companyName,
          plan: plan || 'starter',
          is_active: true,
          trial_starts_at: new Date().toISOString(),
          trial_ends_at: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString()
        })
        .select('id')
        .single();

      if (companyError) {
        console.error('‚ùå Erreur cr√©ation entreprise:', companyError);
        throw new Error(`Erreur lors de la cr√©ation de l'entreprise: ${companyError.message}`);
      }

      companyId = company.id;
      console.log('‚úÖ Entreprise cr√©√©e:', companyId);

    } catch (error) {
      console.error('‚ùå √âchec cr√©ation entreprise:', error);
      throw new Error(`Erreur cr√©ation entreprise: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }

    // √âTAPE 2: Cr√©er l'utilisateur admin
    console.log('üë§ Cr√©ation de l\'utilisateur admin...');
    try {
      const { data: authData, error: authError } = await supabaseAdmin.auth.admin.createUser({
        email: finalAdminEmail,
        password: adminPassword || 'TempPassword123!',
        email_confirm: true,
        user_metadata: {
          first_name: adminFirstName || 'Admin',
          last_name: adminLastName || 'User',
          role: 'admin'
        }
      });

      if (authError) {
        console.error('‚ùå Erreur cr√©ation utilisateur:', authError);
        throw new Error(`Erreur cr√©ation utilisateur: ${authError.message}`);
      }

      if (!authData.user) {
        throw new Error('Aucun utilisateur retourn√© lors de la cr√©ation');
      }

      userId = authData.user.id;
      console.log('‚úÖ Utilisateur cr√©√©:', userId);

    } catch (error) {
      console.error('‚ùå √âchec cr√©ation utilisateur:', error);
      
      // Rollback: supprimer l'entreprise cr√©√©e
      if (companyId) {
        console.log('üîÑ Rollback: suppression entreprise...');
        await supabaseAdmin.from('companies').delete().eq('id', companyId);
      }
      
      throw new Error(`Erreur cr√©ation utilisateur: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }

    // √âTAPE 3: Cr√©er le profil
    console.log('üìù Cr√©ation du profil...');
    try {
      const { error: profileError } = await supabaseAdmin
        .from('profiles')
        .insert({
          id: userId,
          first_name: adminFirstName || 'Admin',
          last_name: adminLastName || 'User',
          role: 'admin',
          company_id: companyId
        });

      if (profileError) {
        console.error('‚ùå Erreur cr√©ation profil:', profileError);
        throw new Error(`Erreur cr√©ation profil: ${profileError.message}`);
      }

      console.log('‚úÖ Profil cr√©√© avec succ√®s');

    } catch (error) {
      console.error('‚ùå √âchec cr√©ation profil:', error);
      
      // Rollback: supprimer utilisateur et entreprise
      if (userId) {
        console.log('üîÑ Rollback: suppression utilisateur...');
        await supabaseAdmin.auth.admin.deleteUser(userId);
      }
      if (companyId) {
        console.log('üîÑ Rollback: suppression entreprise...');
        await supabaseAdmin.from('companies').delete().eq('id', companyId);
      }
      
      throw new Error(`Erreur cr√©ation profil: ${error.message}`);
    }

    // √âTAPE 4: Modules (optionnel - ne pas faire √©chouer si √ßa ne marche pas)
    if (selectedModules && selectedModules.length > 0) {
      console.log('üîß Association des modules...');
      try {
        const { data: modules, error: modulesQueryError } = await supabaseAdmin
          .from('modules')
          .select('id, slug')
          .in('slug', selectedModules);

        if (!modulesQueryError && modules && modules.length > 0) {
          const moduleAssociations = modules.map(module => ({
            company_id: companyId,
            module_id: module.id,
            enabled: true,
            activated_at: new Date().toISOString()
          }));

          const { error: modulesError } = await supabaseAdmin
            .from('company_modules')
            .insert(moduleAssociations);

          if (modulesError) {
            console.warn('‚ö†Ô∏è Erreur modules (non bloquant):', modulesError);
          } else {
            console.log('‚úÖ Modules associ√©s:', modules.length);
          }
        } else {
          console.warn('‚ö†Ô∏è Aucun module trouv√© pour:', selectedModules);
        }
      } catch (moduleError) {
        console.warn('‚ö†Ô∏è Erreur modules (ignor√©e):', moduleError);
      }
    }

    // √âTAPE 5: Email de bienvenue (optionnel)
    try {
      console.log('üì® Envoi email de bienvenue...');
      await supabaseAdmin.functions.invoke('send-trial-welcome-email', {
        body: {
          type: 'welcome',
          companyName: companyName,
          adminEmail: finalAdminEmail,
          adminFirstName: adminFirstName || 'Admin',
          adminLastName: adminLastName || 'User',
          companyId: companyId
        }
      });
      console.log('‚úÖ Email envoy√©');
    } catch (emailError) {
      console.warn('‚ö†Ô∏è Erreur email (ignor√©e):', emailError);
    }

    console.log('üéâ Cr√©ation termin√©e avec succ√®s!');

    return new Response(
      JSON.stringify({
        success: true,
        companyId: companyId,
        userId: userId,
        adminEmail: finalAdminEmail,
        message: 'Entreprise et utilisateur cr√©√©s avec succ√®s'
      }),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
          ...corsHeaders,
        },
      }
    );

  } catch (error: any) {
    console.error('üí• ERREUR FATALE:', error);
    
    // Derni√®re tentative de nettoyage en cas d'erreur
    try {
      if (userId) {
        console.log('üîÑ Nettoyage final: suppression utilisateur...');
        await (await createClient(
          Deno.env.get('SUPABASE_URL') ?? '',
          Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
        )).auth.admin.deleteUser(userId);
      }
      if (companyId) {
        console.log('üîÑ Nettoyage final: suppression entreprise...');
        await (await createClient(
          Deno.env.get('SUPABASE_URL') ?? '',
          Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
        )).from('companies').delete().eq('id', companyId);
      }
    } catch (cleanupError) {
      console.error('‚ö†Ô∏è Erreur nettoyage:', cleanupError);
    }

    return new Response(
      JSON.stringify({
        success: false,
        error: error.message || 'Erreur inconnue',
        details: error.toString()
      }),
      {
        status: 500,
        headers: {
          'Content-Type': 'application/json',
          ...corsHeaders,
        },
      }
    );
  }
};

serve(handler);
